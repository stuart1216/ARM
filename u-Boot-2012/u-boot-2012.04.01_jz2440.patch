diff -urN u-boot-2012.04.01/arch/arm/config.mk u-boot-2012.04.01_100ask/arch/arm/config.mk
--- u-boot-2012.04.01/arch/arm/config.mk	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/arch/arm/config.mk	2017-07-12 23:19:16.740258182 +0800
@@ -72,5 +72,5 @@
 
 # needed for relocation
 ifndef CONFIG_NAND_SPL
-LDFLAGS_u-boot += -pie
+#LDFLAGS_u-boot += -pie
 endif
diff -urN u-boot-2012.04.01/arch/arm/cpu/arm920t/start.S u-boot-2012.04.01_100ask/arch/arm/cpu/arm920t/start.S
--- u-boot-2012.04.01/arch/arm/cpu/arm920t/start.S	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/arch/arm/cpu/arm920t/start.S	2017-07-12 23:19:16.888625642 +0800
@@ -92,6 +92,11 @@
 .globl _end_ofs
 _end_ofs:
 	.word _end - _start
+		
+.globl base_sp
+base_sp:
+	.long 0
+
 
 #ifdef CONFIG_USE_IRQ
 /* IRQ stack memory (calculated at run-time) */
@@ -169,9 +174,33 @@
 
 	/* FCLK:HCLK:PCLK = 1:2:4 */
 	/* default FCLK is 120 MHz ! */
-	ldr	r0, =CLKDIVN
-	mov	r1, #3
-	str	r1, [r0]
+	/*
+	 * ldr	r0, =CLKDIVN
+	 * mov	r1, #3
+	 * str	r1, [r0]
+	 */
+
+	/* setup clock, and ICACHE */
+	
+	ldr r0, =0x4c000014
+	mov r1, #0x05;			  		/* FCLK:HCLK:PCLK=1:4:8 */
+	str r1, [r0]
+
+	/* set CPU bus to “asynchronous bus mode” */
+	mrc	p15, 0, r1, c1, c0, 0		/* control register */ 
+	orr	r1, r1, #0xc0000000			/* “asynchronous bus mode” */
+	mcr	p15, 0, r1, c1, c0, 0		/* control register */
+
+#define S3C2440_MPLL_400MHZ     ((0x5c<<12)|(0x01<<4)|(0x01))
+	ldr r0, =0x4c000004
+	ldr r1, =S3C2440_MPLL_400MHZ    /* FCLK:HCLK:PCLK=400:100:50MHz */
+	str r1, [r0]
+
+	/* start ICACHE */
+	mrc p15, 0, r0, c1, c0, 0	@ read control reg
+	orr r0, r0, #(1<<12)
+	mcr	p15, 0, r0, c1, c0, 0   @ write it back
+
 #endif	/* CONFIG_S3C24X0 */
 
 	/*
@@ -182,103 +211,40 @@
 	bl	cpu_init_crit
 #endif
 
-/* Set stackpointer in internal RAM to call board_init_f */
-call_board_init_f:
-	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
-	bic	sp, sp, #7 /* 8-byte alignment for ABI compliance */
-	ldr	r0,=0x00000000
-	bl	board_init_f
+	ldr sp, =(CONFIG_SYS_INIT_SP_ADDR)
+	bic sp, sp, #7 /* 8-byte alignment for ABI compliance */
 
-/*------------------------------------------------------------------------------*/
+	bl nand_init_ll
+	/* this part of code borrowed from mybootloader/start.S  */
+	mov r0, #0
+	ldr r1, _TEXT_BASE //rather than _start, 
+	                    // just in case value of _start is stored outside of 4K range 
+	                    // when the format of value is complicated
+	ldr r2, _bss_start_ofs
+	/* relocate program */
+	bl copy_code_to_sdram
 
-/*
- * void relocate_code (addr_sp, gd, addr_moni)
- *
- * This "function" does not return, instead it continues in RAM
- * after relocating the monitor code.
- *
- */
-	.globl	relocate_code
-relocate_code:
-	mov	r4, r0	/* save addr_sp */
-	mov	r5, r1	/* save addr of gd */
-	mov	r6, r2	/* save addr of destination */
-
-	/* Set up the stack						    */
-stack_setup:
-	mov	sp, r4
-
-	adr	r0, _start
-	cmp	r0, r6
-	beq	clear_bss		/* skip relocation */
-	mov	r1, r6			/* r1 <- scratch for copy_loop */
-	ldr	r3, _bss_start_ofs
-	add	r2, r0, r3		/* r2 <- source end address	    */
-
-copy_loop:
-	ldmia	r0!, {r9-r10}		/* copy from source address [r0]    */
-	stmia	r1!, {r9-r10}		/* copy to   target address [r1]    */
-	cmp	r0, r2			/* until source end address [r2]    */
-	blo	copy_loop
+	/* clear bss */
+	bl clear_bss  
 
-#ifndef CONFIG_SPL_BUILD
-	/*
-	 * fix .rel.dyn relocations
-	 */
-	ldr	r0, _TEXT_BASE		/* r0 <- Text base */
-	sub	r9, r6, r0		/* r9 <- relocation offset */
-	ldr	r10, _dynsym_start_ofs	/* r10 <- sym table ofs */
-	add	r10, r10, r0		/* r10 <- sym table in FLASH */
-	ldr	r2, _rel_dyn_start_ofs	/* r2 <- rel dyn start ofs */
-	add	r2, r2, r0		/* r2 <- rel dyn start in FLASH */
-	ldr	r3, _rel_dyn_end_ofs	/* r3 <- rel dyn end ofs */
-	add	r3, r3, r0		/* r3 <- rel dyn end in FLASH */
-fixloop:
-	ldr	r0, [r2]		/* r0 <- location to fix up, IN FLASH! */
-	add	r0, r0, r9		/* r0 <- location to fix up in RAM */
-	ldr	r1, [r2, #4]
-	and	r7, r1, #0xff
-	cmp	r7, #23			/* relative fixup? */
-	beq	fixrel
-	cmp	r7, #2			/* absolute fixup? */
-	beq	fixabs
-	/* ignore unknown type of fixup */
-	b	fixnext
-fixabs:
-	/* absolute fix: set location to (offset) symbol value */
-	mov	r1, r1, LSR #4		/* r1 <- symbol index in .dynsym */
-	add	r1, r10, r1		/* r1 <- address of symbol in table */
-	ldr	r1, [r1, #4]		/* r1 <- symbol value */
-	add	r1, r1, r9		/* r1 <- relocated sym addr */
-	b	fixnext
-fixrel:
-	/* relative fix: increase location by offset */
-	ldr	r1, [r0]
-	add	r1, r1, r9
-fixnext:
-	str	r1, [r0]
-	add	r2, r2, #8		/* each rel.dyn entry is 8 bytes */
-	cmp	r2, r3
-	blo	fixloop
-#endif
+	/* the following is running on SDRAM */
+	ldr pc, =call_board_init_f  /* jump from on-chip-ram to SDRAM
 
-clear_bss:
-#ifndef CONFIG_SPL_BUILD
-	ldr	r0, _bss_start_ofs
-	ldr	r1, _bss_end_ofs
-	mov	r4, r6			/* reloc addr */
-	add	r0, r0, r4
-	add	r1, r1, r4
-	mov	r2, #0x00000000		/* clear			    */
-
-clbss_l:str	r2, [r0]		/* clear loop...		    */
-	add	r0, r0, #4
-	cmp	r0, r1
-	bne	clbss_l
+/* Set stackpointer in internal RAM to call board_init_f */
+call_board_init_f:
 
-	bl coloured_LED_init
-	bl red_led_on
-#endif
+	ldr	r0,=0x00000000
+	/* the return is id, and stored in r0 */
+	bl	board_init_f
+		
+	/* void board_init_r(gd_t *id, ulong dest_addr)
+	 * need *id and can be get form board_init_f
+	 * malloc_start = dest_addr - TOTAL_MALLOC_LEN; dest_addr equals to relocate address
+	 */
+	ldr r1, _TEXT_BASE
+	ldr sp, base_sp 
+	
+	bl board_init_r 
 
 /*
  * We are done. Do not return, instead branch to second part of board
diff -urN u-boot-2012.04.01/arch/arm/cpu/u-boot.lds u-boot-2012.04.01_100ask/arch/arm/cpu/u-boot.lds
--- u-boot-2012.04.01/arch/arm/cpu/u-boot.lds	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/arch/arm/cpu/u-boot.lds	2017-07-12 23:19:16.784248758 +0800
@@ -35,6 +35,7 @@
 	{
 		__image_copy_start = .;
 		CPUDIR/start.o (.text)
+		board/samsung/smdk2440/libsmdk2440.o (.text)
 		*(.text)
 	}
 
diff -urN u-boot-2012.04.01/arch/arm/lib/board.c u-boot-2012.04.01_100ask/arch/arm/lib/board.c
--- u-boot-2012.04.01/arch/arm/lib/board.c	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/arch/arm/lib/board.c	2017-07-12 23:19:16.796266133 +0800
@@ -256,12 +256,13 @@
 	NULL,
 };
 
-void board_init_f(ulong bootflag)
+unsigned int board_init_f(ulong bootflag)
 {
 	bd_t *bd;
 	init_fnc_t **init_fnc_ptr;
 	gd_t *id;
 	ulong addr, addr_sp;
+	extern ulong base_sp;
 #ifdef CONFIG_PRAM
 	ulong reg;
 #endif
@@ -369,8 +370,9 @@
 	 * reserve memory for U-Boot code, data & bss
 	 * round down to next 4 kB limit
 	 */
-	addr -= gd->mon_len;
-	addr &= ~(4096 - 1);
+	//addr -= gd->mon_len;
+	//addr &= ~(4096 - 1);
+	addr = CONFIG_SYS_TEXT_BASE;
 
 	debug("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
 
@@ -435,9 +437,13 @@
 	debug("relocation Offset is: %08lx\n", gd->reloc_off);
 	memcpy(id, (void *)gd, sizeof(gd_t));
 
-	relocate_code(addr_sp, id, addr);
+	base_sp = addr_sp;
+	/* program relocate is finished in start.S
+	// relocate_code(addr_sp, id, addr);
 
 	/* NOTREACHED - relocate_code() does not return */
+	/* id for board_init_r */
+	return (unsigned int) id;
 }
 
 #if !defined(CONFIG_SYS_NO_FLASH)
@@ -524,8 +530,9 @@
 		print_size(flash_size, "\n");
 # endif /* CONFIG_SYS_FLASH_CHECKSUM */
 	} else {
-		puts(failed);
-		hang();
+		puts("0 Kb\n");
+		// puts(failed);
+		// hang();
 	}
 #endif
 
@@ -646,7 +653,9 @@
 		setenv("mem", (char *)memsz);
 	}
 #endif
-
+	
+	//mtdparts_init();
+	run_command("mtdparts default", 0);
 	/* main_loop() can return to retry autoboot, if so just run it again. */
 	for (;;) {
 		main_loop();
diff -urN u-boot-2012.04.01/board/samsung/smdk2440/init.c u-boot-2012.04.01_100ask/board/samsung/smdk2440/init.c
--- u-boot-2012.04.01/board/samsung/smdk2440/init.c	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/board/samsung/smdk2440/init.c	2017-07-12 23:19:16.808385509 +0800
@@ -0,0 +1,153 @@
+/* NAND FLASH control register */
+#define NFCONF (*((volatile unsigned long *)0x4E000000))
+#define NFCONT (*((volatile unsigned long *)0x4E000004))
+#define NFCMMD (*((volatile unsigned char *)0x4E000008))
+#define NFADDR (*((volatile unsigned char *)0x4E00000C))
+#define NFDATA (*((volatile unsigned char *)0x4E000010))
+#define NFSTAT (*((volatile unsigned char *)0x4E000020))
+
+void nand_read_ll(unsigned int addr, unsigned char *buf, unsigned int len);
+
+static int isBootFromNorFlash(void)
+{
+	volatile int *p = (volatile int *)0;
+	int val;
+
+	val = *p;
+	*p = 0x12345678;
+	if (*p == 0x12345678)
+	{
+		/* if ture, system booted from NAND Flash */
+		*p = val;
+		return 0;
+	}
+	else
+	{
+		/* system booted from NOR Flash */
+		return 1;
+	}
+}
+
+void copy_code_to_sdram(unsigned char *src, unsigned char *dest, unsigned int len)
+{	
+	int i = 0;
+	
+	/* From NOR Flash */
+	if (isBootFromNorFlash())
+	{
+		while (i < len)
+		{
+			dest[i] = src[i];
+			i++;
+		}
+	}
+	else
+	{
+		//nand_init();
+		nand_read_ll((unsigned int)src, dest, len);
+	}
+}
+
+void clear_bss(void)
+{
+	extern int __bss_start, __bss_end__;
+	int *p = &__bss_start;
+	
+	for (; p < &__bss_end__; p++)
+		*p = 0;
+}
+
+void nand_init_ll(void)
+{
+#define TACLS   0
+#define TWRPH0  1
+#define TWRPH1  0
+	/* setup timing */
+	NFCONF = (TACLS<<12)|(TWRPH0<<8)|(TWRPH1<<4);
+	/* Enable NAND Flash control register, initialize ECC and disable chip select */
+	NFCONT = (1<<4)|(1<<1)|(1<<0);	
+}
+
+static void nand_select(void)
+{
+	NFCONT &= ~(1<<1);	
+}
+
+static void nand_deselect(void)
+{
+	NFCONT |= (1<<1);	
+}
+
+static void nand_cmd(unsigned char cmd)
+{
+	volatile int i;
+	NFCMMD = cmd;
+	for (i = 0; i < 10; i++);
+}
+
+static void nand_addr(unsigned int addr)
+{
+	unsigned int col  = addr % 2048;
+	unsigned int page = addr / 2048;
+	volatile int i;
+
+	NFADDR = col & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR = (col >> 8) & 0xff;
+	for (i = 0; i < 10; i++);
+	
+	NFADDR  = page & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR  = (page >> 8) & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR  = (page >> 16) & 0xff;
+	for (i = 0; i < 10; i++);	
+}
+
+static void nand_wait_ready(void)
+{
+	while (!(NFSTAT & 1));
+}
+
+static unsigned char nand_data(void)
+{
+	return NFDATA;
+}
+
+void nand_read_ll(unsigned int addr, unsigned char *buf, unsigned int len)
+{
+	int col = addr % 2048;
+	int i = 0;
+		
+	/* 1. select NAND Flash */
+	nand_select();
+
+	while (i < len)
+	{
+		/* 2. send cmd 00h */
+		nand_cmd(0x00);
+
+		/* 3. send addr (5 cycles) */
+		nand_addr(addr);
+
+		/* 4. send cmd 30h */
+		nand_cmd(0x30);
+
+		/* 5. wait for ready */
+		nand_wait_ready();
+
+		/* 6. read data */
+		for (; (col < 2048) && (i < len); col++)
+		{
+			buf[i] = nand_data();
+			i++;
+			addr++;
+		}
+		
+		col = 0;
+	}
+
+	/* 7. deselect */		
+	nand_deselect();
+}
+
diff -urN u-boot-2012.04.01/board/samsung/smdk2440/lowlevel_init.S u-boot-2012.04.01_100ask/board/samsung/smdk2440/lowlevel_init.S
--- u-boot-2012.04.01/board/samsung/smdk2440/lowlevel_init.S	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/board/samsung/smdk2440/lowlevel_init.S	2017-07-12 23:19:16.820300556 +0800
@@ -0,0 +1,168 @@
+/*
+ * Memory Setup stuff - taken from blob memsetup.S
+ *
+ * Copyright (C) 1999 2000 2001 Erik Mouw (J.A.K.Mouw@its.tudelft.nl) and
+ *                     Jan-Derk Bakker (J.D.Bakker@its.tudelft.nl)
+ *
+ * Modified for the Samsung SMDK2410 by
+ * (C) Copyright 2002
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+
+#include <config.h>
+#include <version.h>
+
+
+/* some parameters for the board */
+
+/*
+ *
+ * Taken from linux/arch/arm/boot/compressed/head-s3c2410.S
+ *
+ * Copyright (C) 2002 Samsung Electronics SW.LEE  <hitchcar@sec.samsung.com>
+ *
+ */
+
+#define BWSCON	0x48000000
+
+/* BWSCON */
+#define DW8			(0x0)
+#define DW16			(0x1)
+#define DW32			(0x2)
+#define WAIT			(0x1<<2)
+#define UBLB			(0x1<<3)
+
+#define B1_BWSCON		(DW32)
+#define B2_BWSCON		(DW16)
+#define B3_BWSCON		(DW16 + WAIT + UBLB)
+#define B4_BWSCON		(DW16)
+#define B5_BWSCON		(DW16)
+#define B6_BWSCON		(DW32)
+#define B7_BWSCON		(DW32)
+
+/* BANK0CON */
+#define B0_Tacs			0x0	/*  0clk */
+#define B0_Tcos			0x0	/*  0clk */
+#define B0_Tacc			0x7	/* 14clk */
+#define B0_Tcoh			0x0	/*  0clk */
+#define B0_Tah			0x0	/*  0clk */
+#define B0_Tacp			0x0
+#define B0_PMC			0x0	/* normal */
+
+/* BANK1CON */
+#define B1_Tacs			0x0	/*  0clk */
+#define B1_Tcos			0x0	/*  0clk */
+#define B1_Tacc			0x7	/* 14clk */
+#define B1_Tcoh			0x0	/*  0clk */
+#define B1_Tah			0x0	/*  0clk */
+#define B1_Tacp			0x0
+#define B1_PMC			0x0
+
+#define B2_Tacs			0x0
+#define B2_Tcos			0x0
+#define B2_Tacc			0x7
+#define B2_Tcoh			0x0
+#define B2_Tah			0x0
+#define B2_Tacp			0x0
+#define B2_PMC			0x0
+
+#define B3_Tacs			0x0	/*  0clk */
+#define B3_Tcos			0x3	/*  4clk */
+#define B3_Tacc			0x7	/* 14clk */
+#define B3_Tcoh			0x1	/*  1clk */
+#define B3_Tah			0x0	/*  0clk */
+#define B3_Tacp			0x3     /*  6clk */
+#define B3_PMC			0x0	/* normal */
+
+#define B4_Tacs			0x0	/*  0clk */
+#define B4_Tcos			0x0	/*  0clk */
+#define B4_Tacc			0x7	/* 14clk */
+#define B4_Tcoh			0x0	/*  0clk */
+#define B4_Tah			0x0	/*  0clk */
+#define B4_Tacp			0x0
+#define B4_PMC			0x0	/* normal */
+
+#define B5_Tacs			0x0	/*  0clk */
+#define B5_Tcos			0x0	/*  0clk */
+#define B5_Tacc			0x7	/* 14clk */
+#define B5_Tcoh			0x0	/*  0clk */
+#define B5_Tah			0x0	/*  0clk */
+#define B5_Tacp			0x0
+#define B5_PMC			0x0	/* normal */
+
+#define B6_MT			0x3	/* SDRAM */
+#define B6_Trcd			0x1
+#define B6_SCAN			0x1	/* 9bit */
+
+#define B7_MT			0x3	/* SDRAM */
+#define B7_Trcd			0x1	/* 3clk */
+#define B7_SCAN			0x1	/* 9bit */
+
+/* REFRESH parameter */
+#define REFEN			0x1	/* Refresh enable */
+#define TREFMD			0x0	/* CBR(CAS before RAS)/Auto refresh */
+#define Trp			0x0	/* 2clk */
+#define Trc			0x3	/* 7clk */
+#define Tchr			0x2	/* 3clk */
+#define REFCNT			1113	/* period=15.6us, HCLK=60Mhz, (2048+1-15.6*60) */
+/**************************************/
+
+_TEXT_BASE:
+	.word	CONFIG_SYS_TEXT_BASE
+
+.globl lowlevel_init
+lowlevel_init:
+	/* memory control configuration */
+	/* make r0 relative the current location so that it */
+	/* reads SMRDATA out of FLASH rather than memory ! */
+	ldr     r0, =SMRDATA
+	ldr	r1, _TEXT_BASE
+	sub	r0, r0, r1
+	ldr	r1, =BWSCON	/* Bus Width Status Controller */
+	add     r2, r0, #13*4
+0:
+	ldr     r3, [r0], #4
+	str     r3, [r1], #4
+	cmp     r2, r0
+	bne     0b
+
+	/* everything is fine now */
+	mov	pc, lr
+
+	.ltorg
+/* the literal pools origin */
+
+SMRDATA:
+		.long 0x22011110	 //BWSCON
+		.long 0x00000700	 //BANKCON0
+		.long 0x00000700	 //BANKCON1
+		.long 0x00000700	 //BANKCON2
+		.long 0x00000700	 //BANKCON3  
+		.long 0x00000740	 //BANKCON4
+		.long 0x00000700	 //BANKCON5
+		.long 0x00018005	 //BANKCON6
+		.long 0x00018005	 //BANKCON7
+		.long 0x008C04F4	 //REFRESH
+		.long 0x000000B1	 //BANKSIZE
+		.long 0x00000030	 //MRSRB6
+		.long 0x00000030	 //MRSRB7
+
diff -urN u-boot-2012.04.01/board/samsung/smdk2440/Makefile u-boot-2012.04.01_100ask/board/samsung/smdk2440/Makefile
--- u-boot-2012.04.01/board/samsung/smdk2440/Makefile	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/board/samsung/smdk2440/Makefile	2017-07-12 23:19:16.828174801 +0800
@@ -0,0 +1,45 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).o
+
+COBJS	:= smdk2410.o init.o
+SOBJS	:= lowlevel_init.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff -urN u-boot-2012.04.01/board/samsung/smdk2440/smdk2410.c u-boot-2012.04.01_100ask/board/samsung/smdk2440/smdk2410.c
--- u-boot-2012.04.01/board/samsung/smdk2440/smdk2410.c	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/board/samsung/smdk2440/smdk2410.c	2017-07-12 23:19:16.836357270 +0800
@@ -0,0 +1,158 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ *
+ * (C) Copyright 2002, 2010
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <netdev.h>
+#include <asm/io.h>
+#include <asm/arch/s3c24x0_cpu.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define FCLK_SPEED 1
+
+#if FCLK_SPEED==0		/* Fout = 203MHz, Fin = 12MHz for Audio */
+#define M_MDIV	0xC3
+#define M_PDIV	0x4
+#define M_SDIV	0x1
+#elif FCLK_SPEED==1		/* Fout = 202.8MHz */
+#define M_MDIV	0xA1
+#define M_PDIV	0x3
+#define M_SDIV	0x1
+#endif
+
+#define USB_CLOCK 1
+
+#if USB_CLOCK==0
+#define U_M_MDIV	0xA1
+#define U_M_PDIV	0x3
+#define U_M_SDIV	0x1
+#elif USB_CLOCK==1
+#define U_M_MDIV	0x48
+#define U_M_PDIV	0x3
+#define U_M_SDIV	0x2
+#endif
+
+static inline void pll_delay(unsigned long loops)
+{
+	__asm__ volatile ("1:\n"
+	  "subs %0, %1, #1\n"
+	  "bne 1b":"=r" (loops):"0" (loops));
+}
+
+/*
+ * Miscellaneous platform dependent initialisations
+ */
+
+int board_early_init_f(void)
+{
+	struct s3c24x0_clock_power * const clk_power =
+					s3c24x0_get_base_clock_power();
+	struct s3c24x0_gpio * const gpio = s3c24x0_get_base_gpio();
+
+	/* to reduce PLL lock time, adjust the LOCKTIME register */
+	writel(0xFFFFFF, &clk_power->locktime);
+
+	/* configure MPLL */
+	//writel((M_MDIV << 12) + (M_PDIV << 4) + M_SDIV,
+	//       &clk_power->mpllcon);
+
+	/* some delay between MPLL and UPLL */
+	pll_delay(4000);
+
+	/* configure UPLL */
+	writel((U_M_MDIV << 12) + (U_M_PDIV << 4) + U_M_SDIV,
+	       &clk_power->upllcon);
+
+	/* some delay between MPLL and UPLL */
+	pll_delay(8000);
+
+	/* set up the I/O ports */
+	writel(0x007FFFFF, &gpio->gpacon);
+	writel(0x00044555, &gpio->gpbcon);
+	writel(0x000007FF, &gpio->gpbup);
+	writel(0xAAAAAAAA, &gpio->gpccon);
+	writel(0x0000FFFF, &gpio->gpcup);
+	writel(0xAAAAAAAA, &gpio->gpdcon);
+	writel(0x0000FFFF, &gpio->gpdup);
+	writel(0xAAAAAAAA, &gpio->gpecon);
+	writel(0x0000FFFF, &gpio->gpeup);
+	writel(0x000055AA, &gpio->gpfcon);
+	writel(0x000000FF, &gpio->gpfup);
+	writel(0xFF95FFBA, &gpio->gpgcon);
+	writel(0x0000FFFF, &gpio->gpgup);
+	writel(0x002AFAAA, &gpio->gphcon);
+	writel(0x000007FF, &gpio->gphup);
+
+	return 0;
+}
+
+int board_init(void)
+{
+	/* arch number of SMDK2410-Board */
+	gd->bd->bi_arch_number = MACH_TYPE_SMDK2410;
+
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = 0x30000100;
+
+	icache_enable();
+	dcache_enable();
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	/* dram_init must store complete ramsize in gd->ram_size */
+	gd->ram_size = PHYS_SDRAM_1_SIZE;
+	return 0;
+}
+
+#ifdef CONFIG_CMD_NET
+int board_eth_init(bd_t *bis)
+{
+	int rc = 0;
+#ifdef CONFIG_CS8900
+	rc = cs8900_initialize(0, CONFIG_CS8900_BASE);
+#endif
+#ifdef CONFIG_DRIVER_DM9000
+	rc = dm9000_initialize(bis);
+#endif
+	return rc;
+}
+#endif
+
+/*
+ * Hardcoded flash setup:
+ * Flash 0 is a non-CFI AMD AM29LV800BB flash.
+ */
+ulong board_flash_get_legacy(ulong base, int banknum, flash_info_t *info)
+{
+	info->portwidth = FLASH_CFI_16BIT;
+	info->chipwidth = FLASH_CFI_BY16;
+	info->interface = FLASH_CFI_X16;
+	return 1;
+}
diff -urN u-boot-2012.04.01/boards.cfg u-boot-2012.04.01_100ask/boards.cfg
--- u-boot-2012.04.01/boards.cfg	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/boards.cfg	2017-07-12 23:19:16.704284759 +0800
@@ -63,6 +63,7 @@
 cm41xx                       arm         arm920t     -                   -              ks8695
 VCMA9                        arm         arm920t     vcma9               mpl            s3c24x0
 smdk2410                     arm         arm920t     -                   samsung        s3c24x0
+smdk2440                     arm         arm920t     -                   samsung        s3c24x0
 omap1510inn                  arm         arm925t     -                   ti
 integratorap_cm926ejs        arm         arm926ejs   integrator          armltd         -           integratorap:CM926EJ_S
 integratorcp_cm926ejs        arm         arm926ejs   integrator          armltd         -           integratorcp:CM924EJ_S
diff -urN u-boot-2012.04.01/drivers/mtd/cfi_flash.c u-boot-2012.04.01_100ask/drivers/mtd/cfi_flash.c
--- u-boot-2012.04.01/drivers/mtd/cfi_flash.c	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/drivers/mtd/cfi_flash.c	2017-07-12 23:19:16.752210096 +0800
@@ -32,7 +32,9 @@
  */
 
 /* The DEBUG define must be before common to enable debugging */
-/* #define DEBUG	*/
+
+//#define _DEBUG	1
+//#define DEBUG	1
 
 #include <common.h>
 #include <asm/processor.h>
diff -urN u-boot-2012.04.01/drivers/mtd/jedec_flash.c u-boot-2012.04.01_100ask/drivers/mtd/jedec_flash.c
--- u-boot-2012.04.01/drivers/mtd/jedec_flash.c	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/drivers/mtd/jedec_flash.c	2017-07-12 23:19:16.760168223 +0800
@@ -74,6 +74,8 @@
 
 /* MXIC */
 #define MX29LV040	0x004F
+#define MT29LV160DB 0X2249
+
 
 /* WINBOND */
 #define W39L040A	0x00D6
@@ -367,6 +369,27 @@
 		}
 	},
 #endif
+	/* the NOR flash used on board is MT29LV160DB */
+	{
+		.mfr_id		= (u16)MX_MANUFACT,
+		.dev_id		= MT29LV160DB,
+		.name		= "MT29LV160DB",
+		.uaddr		= {
+		/* NOR Flash unlock address */
+			[1] = MTD_UADDR_0x0555_0x02AA /* x16 */
+		},
+		.DevSize	= SIZE_2MiB,
+		.CmdSet		= P_ID_AMD_STD,
+		.NumEraseRegions= 4,
+		.regions	= {
+				ERASEINFO(0x04000, 1),
+				ERASEINFO(0x02000, 2),
+				ERASEINFO(0x08000, 1),
+				ERASEINFO(0x10000, 31),
+
+		}
+	},
+
 };
 
 static inline void fill_info(flash_info_t *info, const struct amd_flash_info *jedec_entry, ulong base)
diff -urN u-boot-2012.04.01/drivers/mtd/nand/Makefile u-boot-2012.04.01_100ask/drivers/mtd/nand/Makefile
--- u-boot-2012.04.01/drivers/mtd/nand/Makefile	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/drivers/mtd/nand/Makefile	2017-07-12 23:19:16.848204815 +0800
@@ -59,6 +59,7 @@
 COBJS-$(CONFIG_NAND_NDFC) += ndfc.o
 COBJS-$(CONFIG_NAND_NOMADIK) += nomadik.o
 COBJS-$(CONFIG_NAND_S3C2410) += s3c2410_nand.o
+COBJS-$(CONFIG_NAND_S3C2440) += s3c2440_nand.o
 COBJS-$(CONFIG_NAND_S3C64XX) += s3c64xx.o
 COBJS-$(CONFIG_NAND_SPEAR) += spr_nand.o
 COBJS-$(CONFIG_NAND_OMAP_GPMC) += omap_gpmc.o
diff -urN u-boot-2012.04.01/drivers/mtd/nand/nand_util.c u-boot-2012.04.01_100ask/drivers/mtd/nand/nand_util.c
--- u-boot-2012.04.01/drivers/mtd/nand/nand_util.c	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/drivers/mtd/nand/nand_util.c	2017-07-12 23:19:16.864534489 +0800
@@ -553,7 +553,7 @@
 
 			ops.len = pagesize;
 			ops.ooblen = nand->oobsize;
-			ops.mode = MTD_OOB_AUTO;
+			ops.mode = MTD_OOB_RAW;
 			ops.ooboffs = 0;
 
 			pages = write_size / pagesize_oob;
@@ -564,7 +564,7 @@
 				ops.oobbuf = ops.datbuf + pagesize;
 
 				rval = nand->write_oob(nand, offset, &ops);
-				if (!rval)
+				if (rval)   /* wrong code */
 					break;
 
 				offset += pagesize;
diff -urN u-boot-2012.04.01/drivers/mtd/nand/s3c2440_nand.c u-boot-2012.04.01_100ask/drivers/mtd/nand/s3c2440_nand.c
--- u-boot-2012.04.01/drivers/mtd/nand/s3c2440_nand.c	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/drivers/mtd/nand/s3c2440_nand.c	2017-07-12 23:19:16.876221093 +0800
@@ -0,0 +1,200 @@
+/*
+ * (C) Copyright 2006 OpenMoko, Inc.
+ * Author: Harald Welte <laforge@openmoko.org>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+
+#include <nand.h>
+#include <asm/arch/s3c24x0_cpu.h>
+#include <asm/io.h>
+
+#define S3C2410_NFCONF_EN          (1<<15)
+#define S3C2410_NFCONF_512BYTE     (1<<14)
+#define S3C2410_NFCONF_4STEP       (1<<13)
+#define S3C2410_NFCONF_INITECC     (1<<12)
+#define S3C2410_NFCONF_nFCE        (1<<11)
+#define S3C2410_NFCONF_TACLS(x)    ((x)<<8)
+#define S3C2410_NFCONF_TWRPH0(x)   ((x)<<4)
+#define S3C2410_NFCONF_TWRPH1(x)   ((x)<<0)
+
+#define S3C2410_ADDR_NALE 4
+#define S3C2410_ADDR_NCLE 8
+
+#ifdef CONFIG_NAND_SPL
+
+/* in the early stage of NAND flash booting, printf() is not available */
+#define printf(fmt, args...)
+
+static void nand_read_buf(struct mtd_info *mtd, u_char *buf, int len)
+{
+	int i;
+	struct nand_chip *this = mtd->priv;
+
+	for (i = 0; i < len; i++)
+		buf[i] = readb(this->IO_ADDR_R);
+}
+#endif
+
+static void s3c2440_hwcontrol(struct mtd_info *mtd, int dat, unsigned int ctrl)
+{
+	//struct nand_chip *chip = mtd->priv;
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+	
+/* rewrite fun() to select and deselct NAND Flash chip */
+	if (ctrl & NAND_CLE) {
+		/* set command */
+		writeb(dat, &nand->nfcmd);
+	} else if (ctrl & NAND_ALE ) {
+		writeb(dat, &nand->nfaddr);
+	}	
+
+}
+
+static int s3c2440_dev_ready(struct mtd_info *mtd)
+{
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+	debug("dev_ready\n");
+	return readl(&nand->nfstat) & 0x01;
+}
+
+/*
+#ifdef CONFIG_S3C2410_NAND_HWECC
+void s3c2410_nand_enable_hwecc(struct mtd_info *mtd, int mode)
+{
+	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+	debug("s3c2410_nand_enable_hwecc(%p, %d)\n", mtd, mode);
+	writel(readl(&nand->nfconf) | S3C2410_NFCONF_INITECC, &nand->nfconf);
+}
+
+static int s3c2410_nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
+				      u_char *ecc_code)
+{
+	struct s3c2410_nand *nand = s3c2410_get_base_nand();
+	ecc_code[0] = readb(&nand->nfecc);
+	ecc_code[1] = readb(&nand->nfecc + 1);
+	ecc_code[2] = readb(&nand->nfecc + 2);
+	debug("s3c2410_nand_calculate_hwecc(%p,): 0x%02x 0x%02x 0x%02x\n",
+	       mtd , ecc_code[0], ecc_code[1], ecc_code[2]);
+
+	return 0;
+}
+
+static int s3c2410_nand_correct_data(struct mtd_info *mtd, u_char *dat,
+				     u_char *read_ecc, u_char *calc_ecc)
+{
+	if (read_ecc[0] == calc_ecc[0] &&
+	    read_ecc[1] == calc_ecc[1] &&
+	    read_ecc[2] == calc_ecc[2])
+		return 0;
+
+	printf("s3c2410_nand_correct_data: not implemented\n");
+	return -1;
+}
+#endif
+*/
+
+static void s3c2440_nand_select(struct mtd_info *mtd, int chipnr)
+{
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+
+	switch (chipnr) {
+	case -1: // deselct
+		nand->nfcont |= (1<<1);
+		break;
+	case 0:
+		nand->nfcont &= ~(1<<1);
+		break;
+
+	default:
+		BUG();
+	}
+}
+
+
+int board_nand_init(struct nand_chip *nand)
+{
+	u_int32_t cfg;
+	u_int8_t tacls, twrph0, twrph1;
+	struct s3c24x0_clock_power *clk_power = s3c24x0_get_base_clock_power();
+	struct s3c2440_nand *nand_reg = s3c2440_get_base_nand();
+
+	debug("board_nand_init()\n");
+
+	writel(readl(&clk_power->clkcon) | (1 << 4), &clk_power->clkcon);
+
+	/* initialize hardware */
+#if defined(CONFIG_S3C24XX_CUSTOM_NAND_TIMING)
+	tacls  = CONFIG_S3C24XX_TACLS;
+	twrph0 = CONFIG_S3C24XX_TWRPH0;
+	twrph1 =  CONFIG_S3C24XX_TWRPH1;
+#else
+	tacls  = 1;
+	twrph0 = 2;
+	twrph1 = 1;
+#endif
+
+#if 0
+	cfg = S3C2410_NFCONF_EN;
+	cfg |= S3C2410_NFCONF_TACLS(tacls - 1);
+	cfg |= S3C2410_NFCONF_TWRPH0(twrph0 - 1);
+	cfg |= S3C2410_NFCONF_TWRPH1(twrph1 - 1);
+#endif
+	cfg = ((tacls - 1)<<12)|((twrph0 - 1)<<8)|((twrph1 - 1)<<4);
+	writel(cfg, &nand_reg->nfconf);
+
+	
+	writel(((1<<4)|(1<<1)|(1<<0)), &nand_reg->nfcont);
+	/* initialize nand_chip data structure */
+	nand->IO_ADDR_R = (void *)&nand_reg->nfdata;
+	nand->IO_ADDR_W = (void *)&nand_reg->nfdata;
+
+	nand->select_chip = s3c2440_nand_select;
+
+	/* read_buf and write_buf are default */
+	/* read_byte and write_byte are default */
+#ifdef CONFIG_NAND_SPL
+	nand->read_buf = nand_read_buf;
+#endif
+
+	/* hwcontrol always must be implemented */
+	nand->cmd_ctrl = s3c2440_hwcontrol;
+
+	nand->dev_ready = s3c2440_dev_ready;
+
+#ifdef CONFIG_S3C2410_NAND_HWECC
+	nand->ecc.hwctl = s3c2410_nand_enable_hwecc;
+	nand->ecc.calculate = s3c2410_nand_calculate_ecc;
+	nand->ecc.correct = s3c2410_nand_correct_data;
+	nand->ecc.mode = NAND_ECC_HW;
+	nand->ecc.size = CONFIG_SYS_NAND_ECCSIZE;
+	nand->ecc.bytes = CONFIG_SYS_NAND_ECCBYTES;
+#else
+	nand->ecc.mode = NAND_ECC_SOFT;
+#endif
+
+#ifdef CONFIG_S3C2410_NAND_BBT
+	nand->options = NAND_USE_FLASH_BBT;
+#else
+	nand->options = 0;
+#endif
+
+	debug("end of nand_init\n");
+
+	return 0;
+}
diff -urN u-boot-2012.04.01/include/common.h u-boot-2012.04.01_100ask/include/common.h
--- u-boot-2012.04.01/include/common.h	2012-04-25 21:22:50.000000000 +0800
+++ u-boot-2012.04.01_100ask/include/common.h	2017-07-12 23:19:16.724197387 +0800
@@ -273,8 +273,8 @@
 extern char console_buffer[];
 
 /* arch/$(ARCH)/lib/board.c */
-void	board_init_f  (ulong) __attribute__ ((noreturn));
-void	board_init_r  (gd_t *, ulong) __attribute__ ((noreturn));
+unsigned int	board_init_f  (ulong);
+void	board_init_r  (gd_t *, ulong);
 int	checkboard    (void);
 int	checkflash    (void);
 int	checkdram     (void);
diff -urN u-boot-2012.04.01/include/configs/smdk2440.h u-boot-2012.04.01_100ask/include/configs/smdk2440.h
--- u-boot-2012.04.01/include/configs/smdk2440.h	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/include/configs/smdk2440.h	2017-07-12 23:19:16.776162840 +0800
@@ -0,0 +1,280 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ * Gary Jennejohn <garyj@denx.de>
+ * David Mueller <d.mueller@elsoft.ch>
+ *
+ * Configuation settings for the SAMSUNG SMDK2410 board.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+/*
+ * High Level Configuration Options
+ * (easy to change)
+ */
+#define CONFIG_ARM920T		/* This is an ARM920T Core */
+#define CONFIG_S3C24X0		/* in a SAMSUNG S3C24x0-type SoC */
+//#define CONFIG_S3C2410		/* specifically a SAMSUNG S3C2410 SoC */
+#define CONFIG_S3C2440
+#define CONFIG_SMDK2410		/* on a SAMSUNG SMDK2410 Board */
+
+/* the addr of sdram is 0x30000000, the size is 64M, the reserved size for program
+ * is 512kb. But after compled the size is aroud 700kb, 1M was left to the program
+ * 0x3000 0000 + 0x0400 0000 - 0x0010 0000 = 0x33f0 0000
+ */
+#define CONFIG_SYS_TEXT_BASE	0x33f00000 
+
+#define CONFIG_SYS_ARM_CACHE_WRITETHROUGH
+
+/* input clock of PLL (the SMDK2410 has 12MHz input clock) */
+#define CONFIG_SYS_CLK_FREQ	12000000
+
+#undef CONFIG_USE_IRQ		/* we don't need IRQ/FIQ stuff */
+
+#define CONFIG_CMDLINE_TAG	/* enable passing of ATAGs */
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+
+/*
+ * Hardware drivers
+ */
+#if 0
+#define CONFIG_CS8900		/* we have a CS8900 on-board */
+#define CONFIG_CS8900_BASE	0x19000300
+#define CONFIG_CS8900_BUS16	/* the Linux driver does accesses as shorts */
+#else
+#define CONFIG_DRIVER_DM9000		1
+#define CONFIG_DM9000_BASE		0x20000000
+#define DM9000_IO			CONFIG_DM9000_BASE
+#define DM9000_DATA			(CONFIG_DM9000_BASE + 4)
+
+#endif
+
+/*
+ * select serial console configuration
+ */
+#define CONFIG_S3C24X0_SERIAL
+#define CONFIG_SERIAL1		1	/* we use SERIAL 1 on SMDK2410 */
+
+/************************************************************
+ * USB support (currently only works with D-cache off)
+ ************************************************************/
+//#define CONFIG_USB_OHCI
+//#define CONFIG_USB_KEYBOARD
+//#define CONFIG_USB_STORAGE
+//#define CONFIG_DOS_PARTITION
+
+/************************************************************
+ * RTC
+ ************************************************************/
+//#define CONFIG_RTC_S3C24X0
+
+
+#define CONFIG_BAUDRATE		115200
+
+/*
+ * BOOTP options
+ */
+//#define CONFIG_BOOTP_BOOTFILESIZE
+//#define CONFIG_BOOTP_BOOTPATH
+//#define CONFIG_BOOTP_GATEWAY
+//#define CONFIG_BOOTP_HOSTNAME
+
+/*
+ * Command line configuration.
+ */
+#include <config_cmd_default.h>
+
+#define CONFIG_CMD_BSP
+#define CONFIG_CMD_CACHE
+//#define CONFIG_CMD_DATE
+//#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_ELF
+#define CONFIG_CMD_NAND
+#define CONFIG_CMD_PING
+#define CONFIG_CMD_REGINFO
+//#define CONFIG_CMD_USB
+
+#define CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#define CONFIG_CMDLINE_EDITING
+
+/* autoboot */
+#define CONFIG_BOOTDELAY	5
+#define CONFIG_BOOT_RETRY_TIME	-1
+#define CONFIG_RESET_TO_RETRY
+#define CONFIG_ZERO_BOOTDELAY_CHECK
+
+#define CONFIG_NETMASK		255.255.255.0
+#define CONFIG_IPADDR		192.168.1.17
+#define CONFIG_SERVERIP		192.168.1.29
+#define CONFIG_ETHADDR		00:e3:28:21:32:f4 
+
+
+#if defined(CONFIG_CMD_KGDB)
+#define CONFIG_KGDB_BAUDRATE	115200	/* speed to run kgdb serial port */
+/* what's this ? it's not used anywhere */
+#define CONFIG_KGDB_SER_INDEX	2	/* which serial port to use */
+#endif
+
+/*
+ * Miscellaneous configurable options
+ */
+#define CONFIG_SYS_LONGHELP		/* undef to save memory */
+#define CONFIG_SYS_PROMPT	"SMDK2410 # "
+#define CONFIG_SYS_CBSIZE	256
+/* Print Buffer Size */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + \
+				sizeof(CONFIG_SYS_PROMPT)+16)
+#define CONFIG_SYS_MAXARGS	16
+#define CONFIG_SYS_BARGSIZE	CONFIG_SYS_CBSIZE
+
+#define CONFIG_DISPLAY_CPUINFO				/* Display cpu info */
+
+#define CONFIG_SYS_MEMTEST_START	0x30000000	/* memtest works on */
+#define CONFIG_SYS_MEMTEST_END		0x33F00000	/* 63 MB in DRAM */
+
+#define CONFIG_SYS_LOAD_ADDR		0x30800000
+
+#define CONFIG_SYS_HZ			1000
+
+/* valid baudrates */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+/* support additional compression methods */
+#define CONFIG_BZIP2
+#define CONFIG_LZO
+#define CONFIG_LZMA
+
+#define CONFIG_CMD_NAND_YAFFS
+
+#define CONFIG_BOOTARGS  "console=ttySAC0 root=/dev/mtdblock3 "
+#define CONFIG_BOOTCOMMAND "nand read 30000000 kernel;bootm 30000000" //the kernel = 0xabc 0x200000, must set after mtdparts seeting
+/*-----------------------------------------------------------------------
+ * Stack sizes
+ *
+ * The stack sizes are set up in start.S using the settings below
+ */
+#define CONFIG_STACKSIZE	(128*1024)	/* regular stack */
+#ifdef CONFIG_USE_IRQ
+#define CONFIG_STACKSIZE_IRQ	(4*1024)	/* IRQ stack */
+#define CONFIG_STACKSIZE_FIQ	(4*1024)	/* FIQ stack */
+#endif
+
+/*-----------------------------------------------------------------------
+ * Physical Memory Map
+ */
+#define CONFIG_NR_DRAM_BANKS	1          /* we have 1 bank of DRAM */
+#define PHYS_SDRAM_1		0x30000000 /* SDRAM Bank #1 */
+#define PHYS_SDRAM_1_SIZE	0x04000000 /* 64 MB */
+
+#define PHYS_FLASH_1		0x00000000 /* Flash Bank #0 */
+
+#define CONFIG_SYS_FLASH_BASE	PHYS_FLASH_1
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+
+#define CONFIG_SYS_FLASH_CFI
+#define CONFIG_FLASH_CFI_DRIVER
+#define CONFIG_FLASH_CFI_LEGACY
+#define CONFIG_SYS_FLASH_LEGACY_512Kx16
+#define CONFIG_FLASH_SHOW_PROGRESS	45
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+#define CONFIG_SYS_FLASH_BANKS_LIST     { CONFIG_SYS_FLASH_BASE }
+#define CONFIG_SYS_MAX_FLASH_SECT	(128)
+
+#if 0  // for NOR Flash
+#define CONFIG_ENV_ADDR			(CONFIG_SYS_FLASH_BASE + 0x070000)
+#define CONFIG_ENV_IS_IN_FLASH
+#define CONFIG_ENV_SIZE			0x10000
+/* allow to overwrite serial and ethaddr */
+#define CONFIG_ENV_OVERWRITE
+#endif
+#define CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_OFFSET 0x00040000
+#define CONFIG_ENV_SIZE   0x00020000
+#define CONFIG_ENV_RANGE  0x00020000
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_DEVICE		/* needed for mtdparts commands */
+#define MTDIDS_DEFAULT		"nand0=nand0"
+#define MTDPARTS_DEFAULT	"mtdparts=nand0:256k(u-boot),128k(params),2M(kernel),-(rootfs)"
+
+
+
+
+
+
+
+
+/*
+ * Size of malloc() pool
+ * BZIP2 / LZO / LZMA need a lot of RAM
+ */
+#define CONFIG_SYS_MALLOC_LEN	(4 * 1024 * 1024)
+
+#define CONFIG_SYS_MONITOR_LEN	(448 * 1024)
+#define CONFIG_SYS_MONITOR_BASE	CONFIG_SYS_FLASH_BASE
+
+/*
+ * NAND configuration
+ */
+#ifdef CONFIG_CMD_NAND
+
+#ifdef CONFIG_S3C2410
+#define CONFIG_NAND_S3C2410
+#define CONFIG_SYS_S3C2410_NAND_HWECC
+#else
+#define CONFIG_NAND_S3C2440
+#define CONFIG_SYS_S3C2440_NAND_HWECC
+#endif
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		0x4E000000
+#endif
+
+/*
+ * File system
+ */
+#if 0
+#define CONFIG_CMD_FAT
+#define CONFIG_CMD_EXT2
+#define CONFIG_CMD_UBI
+#define CONFIG_CMD_UBIFS
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_DEVICE
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_YAFFS2
+#define CONFIG_RBTREE
+#endif
+
+/* additions for new relocation code, must be added to all boards */
+#define CONFIG_SYS_SDRAM_BASE	PHYS_SDRAM_1
+#define CONFIG_SYS_INIT_SP_ADDR	(CONFIG_SYS_SDRAM_BASE + 0x1000 - \
+				GENERATED_GBL_DATA_SIZE)
+
+#define CONFIG_BOARD_EARLY_INIT_F
+
+#endif /* __CONFIG_H */
diff -urN u-boot-2012.04.01/README.md u-boot-2012.04.01_100ask/README.md
--- u-boot-2012.04.01/README.md	1970-01-01 07:00:00.000000000 +0700
+++ u-boot-2012.04.01_100ask/README.md	2017-07-12 23:19:16.952182067 +0800
@@ -0,0 +1,9 @@
+#Modify u-boot-2012.04.01 for s3c2440
+
+## Stage 1
+- set clock 
+- initialize SDRAM
+
+### bugs
+1. no smdk2440 configure: change file name
+2. the output of com is mojibake
\ No newline at end of file
